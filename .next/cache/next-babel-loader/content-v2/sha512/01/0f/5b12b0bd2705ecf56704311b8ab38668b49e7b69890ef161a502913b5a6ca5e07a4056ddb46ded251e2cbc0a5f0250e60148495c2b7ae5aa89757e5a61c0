{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/nnamdiojibe/boston-solar-potential/components/Maps/MapboxMap.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useEffect, useState } from \"react\";\nimport mapboxgl from \"!mapbox-gl\";\nimport { ScrollZoomHandler } from \"mapbox-gl\";\nmapboxgl.accessToken = \"pk.eyJ1Ijoibm9qaWJlIiwiYSI6ImNrcHloOXg1OTA0M3cyb21uYW83d2V3MGwifQ.GlZLAGPrDIf1lihGKJIBqw\";\nexport default function MapboxMap() {\n  _s();\n\n  const mapContainer = useRef(null);\n  const map = useRef(null);\n  const {\n    0: lng,\n    1: setLng\n  } = useState(-71.0579);\n  const {\n    0: lat,\n    1: setLat\n  } = useState(42.3602);\n  const {\n    0: zoom,\n    1: setZoom\n  } = useState(17);\n  const {\n    0: scrollZoom,\n    1: setScrollZoom\n  } = useState(false);\n  useEffect(() => {\n    if (map.current) return; // initialize map only once\n\n    map.current = new mapboxgl.Map({\n      container: mapContainer.current,\n      style: \"mapbox://styles/mapbox/satellite-v9\",\n      center: [lng, lat],\n      zoom: zoom,\n      width: \"w-full\",\n      height: \"h-full\",\n      scrollZoom: false\n    });\n  });\n  useEffect(() => {\n    if (!map.current) return; // wait for map to initialize\n\n    map.current.on(\"move\", () => {\n      setLng(map.current.getCenter().lng.toFixed(4));\n      setLat(map.current.getCenter().lat.toFixed(4));\n      setZoom(map.current.getZoom().toFixed(17));\n      setScrollZoom(map.current.getScrollZoom().toFixed(false));\n    });\n  });\n  var geocoder = new MapboxGeocoder({\n    accessToken: mapboxgl.accessToken,\n    marker: {\n      color: 'orange'\n    },\n    mapboxgl: mapboxgl\n  });\n  map.addControl(geocoder);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: mapContainer,\n    className: \"absolute w-full h-full\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 7\n  }, this);\n}\n\n_s(MapboxMap, \"nLkSgAYlhqdnKoOV7sEnI0BK0oI=\");\n\n_c = MapboxMap;\n\nvar _c;\n\n$RefreshReg$(_c, \"MapboxMap\");","map":{"version":3,"sources":["/Users/nnamdiojibe/boston-solar-potential/components/Maps/MapboxMap.js"],"names":["React","useRef","useEffect","useState","mapboxgl","ScrollZoomHandler","accessToken","MapboxMap","mapContainer","map","lng","setLng","lat","setLat","zoom","setZoom","scrollZoom","setScrollZoom","current","Map","container","style","center","width","height","on","getCenter","toFixed","getZoom","getScrollZoom","geocoder","MapboxGeocoder","marker","color","addControl"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,SAAxB,EAAmCC,QAAnC,QAAmD,OAAnD;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,SAASC,iBAAT,QAAkC,WAAlC;AACAD,QAAQ,CAACE,WAAT,GACE,0FADF;AAGA,eAAe,SAASC,SAAT,GAAqB;AAAA;;AAClC,QAAMC,YAAY,GAAGP,MAAM,CAAC,IAAD,CAA3B;AACA,QAAMQ,GAAG,GAAGR,MAAM,CAAC,IAAD,CAAlB;AACA,QAAM;AAAA,OAACS,GAAD;AAAA,OAAMC;AAAN,MAAgBR,QAAQ,CAAC,CAAC,OAAF,CAA9B;AACA,QAAM;AAAA,OAACS,GAAD;AAAA,OAAMC;AAAN,MAAgBV,QAAQ,CAAC,OAAD,CAA9B;AACA,QAAM;AAAA,OAACW,IAAD;AAAA,OAAOC;AAAP,MAAkBZ,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM;AAAA,OAACa,UAAD;AAAA,OAAaC;AAAb,MAA8Bd,QAAQ,CAAC,KAAD,CAA5C;AAGAD,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIO,GAAG,CAACS,OAAR,EAAiB,OADH,CACW;;AAEzBT,IAAAA,GAAG,CAACS,OAAJ,GAAc,IAAId,QAAQ,CAACe,GAAb,CAAiB;AAC7BC,MAAAA,SAAS,EAAEZ,YAAY,CAACU,OADK;AAE7BG,MAAAA,KAAK,EAAE,qCAFsB;AAG7BC,MAAAA,MAAM,EAAE,CAACZ,GAAD,EAAME,GAAN,CAHqB;AAI7BE,MAAAA,IAAI,EAAEA,IAJuB;AAK7BS,MAAAA,KAAK,EAAE,QALsB;AAM7BC,MAAAA,MAAM,EAAE,QANqB;AAO7BR,MAAAA,UAAU,EAAE;AAPiB,KAAjB,CAAd;AAWD,GAdQ,CAAT;AAiBAd,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACO,GAAG,CAACS,OAAT,EAAkB,OADJ,CACY;;AAC1BT,IAAAA,GAAG,CAACS,OAAJ,CAAYO,EAAZ,CAAe,MAAf,EAAuB,MAAM;AAC3Bd,MAAAA,MAAM,CAACF,GAAG,CAACS,OAAJ,CAAYQ,SAAZ,GAAwBhB,GAAxB,CAA4BiB,OAA5B,CAAoC,CAApC,CAAD,CAAN;AACAd,MAAAA,MAAM,CAACJ,GAAG,CAACS,OAAJ,CAAYQ,SAAZ,GAAwBd,GAAxB,CAA4Be,OAA5B,CAAoC,CAApC,CAAD,CAAN;AACAZ,MAAAA,OAAO,CAACN,GAAG,CAACS,OAAJ,CAAYU,OAAZ,GAAsBD,OAAtB,CAA8B,EAA9B,CAAD,CAAP;AACAV,MAAAA,aAAa,CAACR,GAAG,CAACS,OAAJ,CAAYW,aAAZ,GAA4BF,OAA5B,CAAoC,KAApC,CAAD,CAAb;AACD,KALD;AAMD,GARQ,CAAT;AAUA,MAAIG,QAAQ,GAAG,IAAIC,cAAJ,CAAmB;AAChCzB,IAAAA,WAAW,EAAEF,QAAQ,CAACE,WADU;AAEhC0B,IAAAA,MAAM,EAAE;AACRC,MAAAA,KAAK,EAAE;AADC,KAFwB;AAKhC7B,IAAAA,QAAQ,EAAEA;AALsB,GAAnB,CAAf;AAQEK,EAAAA,GAAG,CAACyB,UAAJ,CAAeJ,QAAf;AAIF,sBAEI;AAAK,IAAA,GAAG,EAAEtB,YAAV;AAAwB,IAAA,SAAS,EAAC;AAAlC;AAAA;AAAA;AAAA;AAAA,UAFJ;AAKD;;GArDuBD,S;;KAAAA,S","sourcesContent":["import React, { useRef, useEffect, useState } from \"react\";\nimport mapboxgl from \"!mapbox-gl\";\nimport { ScrollZoomHandler } from \"mapbox-gl\";\nmapboxgl.accessToken =\n  \"pk.eyJ1Ijoibm9qaWJlIiwiYSI6ImNrcHloOXg1OTA0M3cyb21uYW83d2V3MGwifQ.GlZLAGPrDIf1lihGKJIBqw\";\n\nexport default function MapboxMap() {\n  const mapContainer = useRef(null);\n  const map = useRef(null);\n  const [lng, setLng] = useState(-71.0579);\n  const [lat, setLat] = useState(42.3602);\n  const [zoom, setZoom] = useState(17);\n  const [scrollZoom, setScrollZoom] = useState(false);\n \n\n  useEffect(() => {\n    if (map.current) return; // initialize map only once\n\n    map.current = new mapboxgl.Map({\n      container: mapContainer.current,\n      style: \"mapbox://styles/mapbox/satellite-v9\", \n      center: [lng, lat],\n      zoom: zoom,\n      width: \"w-full\",\n      height: \"h-full\",\n      scrollZoom: false,\n    });\n\n    \n  });\n\n  \n  useEffect(() => {\n    if (!map.current) return; // wait for map to initialize\n    map.current.on(\"move\", () => {\n      setLng(map.current.getCenter().lng.toFixed(4));\n      setLat(map.current.getCenter().lat.toFixed(4));\n      setZoom(map.current.getZoom().toFixed(17));\n      setScrollZoom(map.current.getScrollZoom().toFixed(false));\n    });\n  });\n\n  var geocoder = new MapboxGeocoder({\n    accessToken: mapboxgl.accessToken,\n    marker: {\n    color: 'orange'\n    },\n    mapboxgl: mapboxgl\n    });\n     \n    map.addControl(geocoder);\n\n  \n\n  return (\n    \n      <div ref={mapContainer} className=\"absolute w-full h-full\" />\n    \n  );\n}\n"]},"metadata":{},"sourceType":"module"}