{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/nnamdiojibe/boston-solar-potential/components/Maps/MapboxMap.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useRef, useEffect, useState } from \"react\";\nimport mapboxgl from \"!mapbox-gl\";\nimport MapboxGeocoder from \"@mapbox/mapbox-gl-geocoder\";\nmapboxgl.accessToken = \"pk.eyJ1Ijoibm9qaWJlIiwiYSI6ImNrcHloOXg1OTA0M3cyb21uYW83d2V3MGwifQ.GlZLAGPrDIf1lihGKJIBqw\";\nexport default function Map() {\n  const {\n    0: viewport,\n    1: setViewport\n  } = useState({\n    latitude: 42.4211,\n    longitude: -71.6903,\n    width: \"100vw\",\n    height: \"100vh\",\n    zoom: 10\n  });\n  const {\n    0: selectedPark,\n    1: setSelectedPark\n  } = useState(null);\n  useEffect(() => {\n    const listener = e => {\n      if (e.key === \"Escape\") {\n        setSelectedPark(null);\n      }\n    };\n\n    window.addEventListener(\"keydown\", listener);\n    return () => {\n      window.removeEventListener(\"keydown\", listener);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(ReactMapGL, _objectSpread(_objectSpread({}, viewport), {}, {\n      mapboxApiAccessToken: process.env.REACT_APP_MAPBOX_TOKEN,\n      mapStyle: \"mapbox://styles/leighhalliday/cjufmjn1r2kic1fl9wxg7u1l4\",\n      onViewportChange: viewport => {\n        setViewport(viewport);\n      },\n      children: [parkDate.features.map(park => /*#__PURE__*/_jsxDEV(Marker, {\n        latitude: park.geometry.coordinates[1],\n        longitude: park.geometry.coordinates[0],\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"marker-btn\",\n          onClick: e => {\n            e.preventDefault();\n            setSelectedPark(park);\n          },\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: \"/skateboarding.svg\",\n            alt: \"Skate Park Icon\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 15\n        }, this)\n      }, park.properties.PARK_ID, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 13\n      }, this)), selectedPark ? /*#__PURE__*/_jsxDEV(Popup, {\n        latitude: selectedPark.geometry.coordinates[1],\n        longitude: selectedPark.geometry.coordinates[0],\n        onClose: () => {\n          setSelectedPark(null);\n        },\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: selectedPark.properties.NAME\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: selectedPark.properties.DESCRIPTIO\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 13\n      }, this) : null]\n    }), void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 7\n  }, this);\n}","map":{"version":3,"sources":["/Users/nnamdiojibe/boston-solar-potential/components/Maps/MapboxMap.js"],"names":["React","useRef","useEffect","useState","mapboxgl","MapboxGeocoder","accessToken","Map","viewport","setViewport","latitude","longitude","width","height","zoom","selectedPark","setSelectedPark","listener","e","key","window","addEventListener","removeEventListener","process","env","REACT_APP_MAPBOX_TOKEN","parkDate","features","map","park","geometry","coordinates","preventDefault","properties","PARK_ID","NAME","DESCRIPTIO"],"mappings":"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","sourcesContent":["import React, { useRef, useEffect, useState } from \"react\";\nimport mapboxgl from \"!mapbox-gl\";\nimport MapboxGeocoder from \"@mapbox/mapbox-gl-geocoder\";\nmapboxgl.accessToken =\n  \"pk.eyJ1Ijoibm9qaWJlIiwiYSI6ImNrcHloOXg1OTA0M3cyb21uYW83d2V3MGwifQ.GlZLAGPrDIf1lihGKJIBqw\";\n\n  export default function Map() {\n    const [viewport, setViewport] = useState({\n      latitude: 42.4211,\n      longitude: -71.6903,\n      width: \"100vw\",\n      height: \"100vh\",\n      zoom: 10\n    });\n    const [selectedPark, setSelectedPark] = useState(null);\n  \n    useEffect(() => {\n      const listener = e => {\n        if (e.key === \"Escape\") {\n          setSelectedPark(null);\n        }\n      };\n      window.addEventListener(\"keydown\", listener);\n  \n      return () => {\n        window.removeEventListener(\"keydown\", listener);\n      };\n    }, []);\n  \n    return (\n      <div>\n        <ReactMapGL\n          {...viewport}\n          mapboxApiAccessToken={process.env.REACT_APP_MAPBOX_TOKEN}\n          mapStyle=\"mapbox://styles/leighhalliday/cjufmjn1r2kic1fl9wxg7u1l4\"\n          onViewportChange={viewport => {\n            setViewport(viewport);\n          }}\n        >\n          {parkDate.features.map(park => (\n            <Marker\n              key={park.properties.PARK_ID}\n              latitude={park.geometry.coordinates[1]}\n              longitude={park.geometry.coordinates[0]}\n            >\n              <button\n                className=\"marker-btn\"\n                onClick={e => {\n                  e.preventDefault();\n                  setSelectedPark(park);\n                }}\n              >\n                <img src=\"/skateboarding.svg\" alt=\"Skate Park Icon\" />\n              </button>\n            </Marker>\n          ))}\n  \n          {selectedPark ? (\n            <Popup\n              latitude={selectedPark.geometry.coordinates[1]}\n              longitude={selectedPark.geometry.coordinates[0]}\n              onClose={() => {\n                setSelectedPark(null);\n              }}\n            >\n              <div>\n                <h2>{selectedPark.properties.NAME}</h2>\n                <p>{selectedPark.properties.DESCRIPTIO}</p>\n              </div>\n            </Popup>\n          ) : null}\n        </ReactMapGL>\n      </div>\n    );\n  }\n \n  \n"]},"metadata":{},"sourceType":"module"}